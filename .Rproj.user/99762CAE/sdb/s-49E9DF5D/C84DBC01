{
    "collab_server" : "",
    "contents" : "\n# Everything in this file gets sourced during simInit, and all functions and objects\n# are put into the simList. To use objects and functions, use sim$xxx.\ndefineModule(sim, list(\n  name = \"vanWagner\",\n  description = \"insert module description here\",\n  keywords = c(\"insert key words here\"),\n  authors = c(person(c(\"Steve\", \"G\"), \"Cumming\", email=\"stevec@sbf.ulaval.ca\", role=c(\"aut\", \"cre\"))),\n  childModules = character(),\n  version = numeric_version(\"1.1.1.9001\"),\n  spatialExtent = raster::extent(rep(NA_real_, 4)),\n  timeframe = as.POSIXlt(c(NA, NA)),\n  timeunit = \"year\",\n  citation = list(\"citation.bib\"),\n  documentation = list(\"README.txt\", \"vanWagner.Rmd\"),\n  reqdPkgs = list(),\n  parameters = rbind(\n    #defineParameter(\"paramName\", \"paramClass\", value, min, max, \"parameter description\")),\n    defineParameter(\"pBurn\", \"numeric\", 0.01, 0, 1, desc=\"the rate of burn\"),\n    defineParameter(\"returnInterval\", \"numeric\", 1.0, NA, NA, desc=\"interval between main events\"),\n    defineParameter(\"startTime\",\"numeric\", 0, NA, NA, desc=\"time of first burn event\"),\n    defineParameter(\".plotInitialTime\", \"numeric\", NA, NA, NA, desc=\"This describes the simulation time at which the first plot event should occur\"),\n    defineParameter(\".plotInterval\", \"numeric\", NA, NA, NA, desc=\"This describes the simulation time at which the first plot event should occur\"),\n    defineParameter(\".saveInitialTime\", \"numeric\", NA, NA, NA, desc=\"This describes the simulation time at which the first save event should occur\"),\n    defineParameter(\".saveInterval\", \"numeric\", NA, NA, NA, desc=\"This describes the simulation time at which the first save event should occur\"),\n    defineParameter(\".statsInitialTime\", \"numeric\", 0, NA, NA, desc=\"This describes the simulation time at which the first stats event should occur\")\n  ),\n  inputObjects = data.frame(\n    objectName = \"ageMap\",\n    objectClass = \"RasterLayer\",\n    sourceURL = \"\",\n    other = NA_character_,\n    stringsAsFactors = FALSE\n  ),\n  outputObjects = data.frame(\n    objectName = c(\"ageMap\",\"ignitionLoci\"),\n    objectClass = c(\"RasterLayer\",\"vector\"),\n    other = NA_character_,\n    stringsAsFactors = FALSE\n  )\n))\n\n## event types\n#   - type `init` is required for initialiazationlob\n\ndoEvent.vanWagner = function(sim, eventTime, eventType, debug = FALSE) {\n  if (eventType == \"init\") {\n    ### check for more detailed object dependencies:\n    ### (use `checkObject` or similar)\n    #browser()\n    # do stuff for this event\n    sim <- sim$vanWagnerInit(sim)\n    \n    # schedule future event(s)\n    sim <- scheduleEvent(sim, params(sim)$vanWagner$startTime, \"vanWagner\", \"burn\")\n    sim <- scheduleEvent(sim, params(sim)$vanWagner$.plotInitialTime, \"vanWagner\", \"plot\")\n    sim <- scheduleEvent(sim, params(sim)$vanWagner$.saveInitialTime, \"vanWagner\", \"save\")\n    sim <- scheduleEvent(sim, params(sim)$vanWagner$.statsInitialTime, \"vanWagner\", \"stats\")\n  } else if (eventType == \"plot\") {\n    # ! ----- EDIT BELOW ----- ! #\n    # do stuff for this event\n    \n    #Plot(objectFromModule) # uncomment this, replace with object to plot\n    # schedule future event(s)\n    \n    # e.g.,\n    sim <- scheduleEvent(sim, params(sim)$vanWagner$.plotInitialTime, \"vanWagner\", \"plot\")\n    \n    # ! ----- STOP EDITING ----- ! #\n  } else if (eventType == \"save\") {\n    # ! ----- EDIT BELOW ----- ! #\n    # do stuff for this event\n    \n    # e.g., call your custom functions/methods here\n    # you can define your own methods below this `doEvent` function\n    \n    # schedule future event(s)\n    \n    # e.g.,\n    # sim <- scheduleEvent(sim, time(sim) + increment, \"vanWagner\", \"save\")\n    \n    # ! ----- STOP EDITING ----- ! #\n  } else if (eventType == \"burn\") {\n    # ! ----- EDIT BELOW ----- ! #\n    sim <- vanWagnerBurn(sim)\n    sim <- scheduleEvent(sim, time(sim) + params(sim)$vanWagner$returnInterval, \"vanWagner\", \"burn\")\n    # ! ----- STOP EDITING ----- ! #\n  } else if (eventType == \"stats\"){\n    sim <- vanWagnerStatsF(sim)\n    sim <- scheduleEvent(sim, time(sim) + params(sim)$vanWagner$returnInterval, \"vanWagner\", \"stats\")\n  }\n  else {\n    warning(paste(\"Undefined event type: '\", events(sim)[1, \"eventType\", with = FALSE],\n                  \"' in module '\", events(sim)[1, \"moduleName\", with = FALSE], \"'\", sep = \"\"))\n  }\n  return(invisible(sim))\n}\n\n## event functions\n#   - follow the naming convention `modulenameEventtype()`;\n#   - `modulenameInit()` function is required for initiliazation;\n#   - keep event functions short and clean, modularize by calling subroutines from section below.\n\n### template initialization\nvanWagnerInit <- function(sim) {\n  \n  sim$vanWagnerStats<-list(N=numeric(0),p=numeric(0),rate=numeric(0))\n  \n  return(invisible(sim))\n}\n\n### template for save events\nvanWagnerSave <- function(sim) {\n  # ! ----- EDIT BELOW ----- ! #\n  # do stuff for this event\n  sim <- saveFiles(sim)\n  \n  # ! ----- STOP EDITING ----- ! #\n  return(invisible(sim))\n}\n\n### template for plot events\nvanWagnerPlot <- function(sim) {\n  # ! ----- EDIT BELOW ----- ! #\n  # do stuff for this event\n  #Plot(\"object\")\n  \n  # ! ----- STOP EDITING ----- ! #\n  return(invisible(sim))\n}\n\n\nvanWagnerBurn <- function(sim) {\n  # ! ----- EDIT BELOW ----- ! #\n  #note that this assumes square maps with no holes.\n  N<-prod(dim(sim$ageMap))\n  sim$ignitionLoci<-which(runif(N) < params(sim)$vanWagner$pBurn)\n  sim$ageMap[sim$ignitionLoci]<-0  \n  return(invisible(sim))\n}\n\nvanWagnerStatsF<-function(sim){\n  N<-prod(dim(sim$ageMap))\n  sim$vanWagnerStats$rate<-c(sim$vanWagnerStats$rate,length(sim$ignitionLoci)/N)\n  sim$vanWagnerStats$p<-c(sim$vanWagnerStats$p,params(sim)$vanWagner$pBurn)\n  sim$vanWagnerStats$N<-c(sim$vanWagnerStats$N,length(sim$ignitionLoci))\n  return(invisible(sim))\n}\n.init = function(sim) {\n  # Any code written here will be run during the simInit and subsequently deleted\n  # This is useful if there is something required before simulation, such as data downloading, e.g.,\n  # downloadData(\"LCC2005\", modulePath(sim))\n  # ! ----- EDIT BELOW ----- ! #\n\n  # ! ----- STOP EDITING ----- ! #\n  return(invisible(sim))\n}\n### add additional events as needed by copy/pasting from above\n\n",
    "created" : 1470351687131.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3073228786",
    "id" : "C84DBC01",
    "lastKnownWriteTime" : 1470351964,
    "last_content_update" : 1470351964310,
    "path" : "~/Documents/GitHub/LandWeb/fireNull/fireNull.R",
    "project_path" : "fireNull/fireNull.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}