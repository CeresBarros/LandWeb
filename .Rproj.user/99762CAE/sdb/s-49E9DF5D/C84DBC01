{
    "collab_server" : "",
    "contents" : "\n# Everything in this file gets sourced during simInit, and all functions and objects\n# are put into the simList. To use objects and functions, use sim$xxx.\ndefineModule(sim, list(\n  name = \"fireNull\",\n  description = \"implement a spatially stratified vanWagner fire model\",\n  keywords = c(\"fire cycle\", \"burn probability\"),\n  authors = c(person(c(\"Steven\", \"G\"), \"Cumming\", email=\"stevec@sbf.ulaval.ca\", role=c(\"aut\", \"cre\"))),\n  childModules = character(),\n  version = numeric_version(\"1.1.1.9001\"),\n  spatialExtent = raster::extent(rep(NA_real_, 4)),\n  timeframe = as.POSIXlt(c(NA, NA)),\n  timeunit = \"year\",\n  citation = list(\"citation.bib\"),\n  documentation = list(\"README.txt\", \"fireNull.Rmd\"),\n  reqdPkgs = list(\"raster\",\"sp\"),\n  parameters = rbind( #should initial times be 0 or 1?\n    #defineParameter(\"paramName\", \"paramClass\", value, min, max, \"parameter description\")),\n    #defineParameter(\"pBurn\", \"numeric\", 0.01, 0, 1, desc=\"the rate of burn\"),\n    defineParameter(\"doAgeMapping\", \"logical\", FALSE, TRUE, FALSE, desc=\"keep track of time since fire?\"),\n    defineParameter(\"returnInterval\", \"numeric\", 1.0, NA, NA, desc=\"interval between main events\"),\n    defineParameter(\"startTime\",\"numeric\", 0, NA, NA, desc=\"time of first burn event\"),\n    defineParameter(\".plotInitialTime\", \"numeric\", NA, NA, NA, desc=\"This describes the simulation time at which the first plot event should occur\"),\n    defineParameter(\".plotInterval\", \"numeric\", NA, NA, NA, desc=\"This describes the simulation time at which the first plot event should occur\"),\n    defineParameter(\".saveInitialTime\", \"numeric\", NA, NA, NA, desc=\"This describes the simulation time at which the first save event should occur\"),\n    defineParameter(\".saveInterval\", \"numeric\", NA, NA, NA, desc=\"This describes the simulation time at which the first save event should occur\"),\n    defineParameter(\".statsInitialTime\", \"numeric\", 0, NA, NA, desc=\"This describes the simulation time at which the first stats event should occur\")\n  ),\n  inputObjects = data.frame(\n    #should LCC05, the fire regime shapefile and the study area raster be specified?\n    #they should be loaded by the parent, and are needed for init.\n    objectName = \"\",\n    objectClass = \"\",\n    sourceURL = \"\",\n    other = NA_character_,\n    stringsAsFactors = FALSE\n  ),\n  outputObjects = data.frame(\n    objectName = c(\"rasterTimeSinceFire\",\"burnLoci\",\"rasterCurrentBurn\"),\n    objectClass = c(\"RasterLayer\",\"vector\", \"RasterLayer\"),\n    other = NA_character_,\n    stringsAsFactors = FALSE\n  )\n))\n\n## event types\n#   - type `init` is required for initialiazation\n\ndoEvent.fireNull = function(sim, eventTime, eventType, debug = FALSE) {\n  if (eventType == \"init\") {\n    # do stuff for this event\n    sim <- sim$fireNullInit(sim)\n    # schedule future event(s)\n    sim <- scheduleEvent(sim, params(sim)$fireNull$startTime, \"fireNull\", \"burn\")\n    sim <- scheduleEvent(sim, params(sim)$fireNull$.plotInitialTime, \"fireNull\", \"plot\")\n    sim <- scheduleEvent(sim, params(sim)$fireNull$.saveInitialTime, \"fireNull\", \"save\")\n    sim <- scheduleEvent(sim, params(sim)$fireNull$.statsInitialTime, \"fireNull\", \"stats\")\n  } else if (eventType == \"plot\") {\n    # ! ----- EDIT BELOW ----- ! #\n    # do stuff for this event\n    if (params(sim)$fireNull$doAgeMapping == TRUE){\n      Plot(sim$timeSinceFireMap)\n    }\n    # e.g.,\n    sim <- scheduleEvent(sim, time(sim) + params(sim)$fireNull$.plotInterval, \"fireNull\", \"plot\")\n    # ! ----- STOP EDITING ----- ! #\n  } else if (eventType == \"save\") {\n    sim <- scheduleEvent(sim, time(sim) + params(sim)$fireNull$.saveInterval, \"fireNull\", \"save\")\n  } else if (eventType == \"burn\") {\n    sim <- fireNullBurn(sim)\n    #do some book-keeping, not part of the actual fire process\n    if (params(sim)$fireNull$doAgeMapping == TRUE){\n      sim$rasterTimeSinceFire <- sim$rasterTimeSinceFire + 1\n      sim$rasterTimeSinceFire[sim$burnLoci] = 0 \n    }\n    #schedule next burn event\n    sim <- scheduleEvent(sim, time(sim) + params(sim)$fireNull$returnInterval, \"fireNull\", \"burn\")\n  } else if (eventType == \"stats\"){\n    sim <- fireNullStatsF(sim)\n    sim <- scheduleEvent(sim, time(sim) + params(sim)$fireNull$returnInterval, \"fireNull\", \"stats\")\n  }\n  else {\n    warning(paste(\"Undefined event type: '\", events(sim)[1, \"eventType\", with = FALSE],\n                  \"' in module '\", events(sim)[1, \"moduleName\", with = FALSE], \"'\", sep = \"\"))\n  }\n  return(invisible(sim))\n}\n\n## event functions\n#   - follow the naming convention `modulenameEventtype()`;\n#   - `modulenameInit()` function is required for initiliazation;\n#   - keep event functions short and clean, modularize by calling subroutines from section below.\n\n### template initialization\nfireNullInit <- function(sim) {\n  \n  if (!exists(rasterBurnProb, where=envir(sim))){\n    pBurn <- 1/sim$shapeFileFireRegime$fireReturnInterval\n    sim$rasterBurnProb <- rasterize(sim$shapeFileFireRegime,sim$rasterStudyArea,field=pBurn, mask=TRUE)\n  }\n  ##THIS should move to parent .init\n  if (!exists(rasterFlammable, where=envir(sim))){\n    nonFlammClasses<-c(36,37,38,39)\n    oldClass <- 0:39\n    newClass <- ifelse(oldClass %in% nonFlammClasses,1,0)   #1 codes for non flammable \n    #see mask argument for SpaDES::spread()\n    flammableTable <- cbind(oldClass, newClass)\n    #according to Yong, Canada Landcover 2005 is loaded as LCC05 \n    sim$rasterFlammable <- ratify(reclassify(sim$LCC05, flammableTable,count=TRUE))\n    setColors(sim$rasterFlammable,n=2) <- colorRampPalette(c(\"blue\", \"red\"))(2) \n  }\n  #doing this here ensures non flammabe cells are accounted for, \n  #no matter when/where rasterBurnProb and rasterFlammable are created.\n  sim$rasterBurnProb[which(sim$rasterFlammable == 0)] <- 0 #this could turn some NAs to 0s.\n  sim$rasterCurrentBurn <- sim$rasterBurnProb * 0 #this conserves NAs\n  \n  if (params(sim)$fireNull$doAgeMapping == TRUE){\n    #ideally, we would have loaded an actual initial age map based e.g.\n    #on inventory and or the national product that BEACONs uses \n    #(see the BEACONs modules for details and source)\n    sim$rasterTimeSinceFire <- sim$rasterBurnProb * 0 #this conserves NAs\n    #assign legend and colours if you are serious\n  }\n  \n  \n  #for any stats, we need to caculate how many burnable cells there are\n  N<- sum(!is.na(sim$rasterBurnProb)) \n  N<- N - which(sim$rasterBurnProb == 0) # we will \"mask\" the lakes etc. with 0, not NA\n  sim$nBurnableCells <- N\n  sim$burnLoci <- vector(\"numeric\")\n  ##\n  \n  \n  sim$fireNullStats<-list(N=numeric(0),rate=numeric(0))\n  \n  return(invisible(sim))\n}\n\n### template for save events\nfireNullSave <- function(sim) {\n  # ! ----- EDIT BELOW ----- ! #\n  # do stuff for this event\n  sim <- saveFiles(sim)\n  \n  # ! ----- STOP EDITING ----- ! #\n  return(invisible(sim))\n}\n\n### template for plot events\nfireNullPlot <- function(sim) {\n  # ! ----- EDIT BELOW ----- ! #\n  # do stuff for this event\n  #Plot(\"object\")\n  \n  # ! ----- STOP EDITING ----- ! #\n  return(invisible(sim))\n}\n\n\nfireNullBurn <- function(sim) {\n  # ! ----- EDIT BELOW ----- ! #\n  \n  N<-prod(dim(sim$rasterBurnProb))\n  sim$rasterCurrentBurn<-sim$rasterCurrentBurn*0 #zero, but preserve NAs\n  sim$burnLoci<-which(runif(N) < sim$rasterBurnProb) #this ignores any NAs in the map.\n  sim$rasterCurrentBurn[sim$burnLoci]<-1 #mark as burned.\n  \n  return(invisible(sim))\n}\n\nfireNullStatsF<-function(sim){\n  N<- sim$nBurnableCells\n  \n  sim$fireNullStats$rate<-c(sim$fireNullStats$rate,length(sim$burnLoci)/N)\n  #sim$fireNullStats$p<-c(sim$fireNullStats$p,params(sim)$fireNull$pBurn)\n  sim$fireNullStats$N<-c(sim$fireNullStats$N,length(sim$burnLoci))\n  return(invisible(sim))\n}\n\n.init = function(sim) {\n  \n  if (!exists(shapeFileFireRegime,where=envir(sim)) ||\n      TRUE # test if it is a proper shapefile\n      ){ \n    stop(\"missing or invalid shapefile: how did you even get here?\")\n  }\n  \n  \n \n  \n  return(invisible(sim))\n}\n### add additional events as needed by copy/pasting from above\n\n",
    "created" : 1470351687131.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1923196331",
    "id" : "C84DBC01",
    "lastKnownWriteTime" : 1471323090,
    "last_content_update" : 1471323090368,
    "path" : "~/Documents/GitHub/LandWeb/fireNull/fireNull.R",
    "project_path" : "fireNull/fireNull.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}