library(magrittr)
library(archivist)
library(SpaDES)
rasterOptions(maxmemory = 1e9)
baseDir<-file.path("~","Dropbox","SpaDES","Data")
parentModule <- "fireNull" #which module should hold the cached data for GitHub
#this would normally be a parent module, hence the name
inputDir <- file.path(tempdir(), "inputs") %>% checkPath(create = TRUE)
outputDir <- file.path(tempdir(), "outputs")
moduleDir <- file.path(".")
cacheDir <- file.path(moduleDir,parentModule,"data", "cache") %>% checkPath(create = TRUE)
LCC05 <-raster(file.path(baseDir,
"LandCoverOfCanada2005_V1_4",
"LCC2005_V1_4a.tif")
)
foo<-path.expand(file.path(baseDir,"LandWEB","shp")) #somebody does not like ~s
shpStudyRegion <- SpaDES::cache(cacheDir, readOGR, foo,"shpLandWEB")
shpStudyRegion$fireReturnInterval <- shpStudyRegion$LTHRC #because of course it does.
rm(foo)
colrs <- colorRampPalette(colors = c("red", "dark green"))(max(shpStudyRegion$fireReturnInterval))[shpStudyRegion$fireReturnInterval]
spplot(shpStudyRegion["fireReturnInterval"])
times <- list(start = 0, end =10)
parameters <- list(
# .progress = list(type = "text", interval = 1), # for a progress bar
fireNull = list(startTime = 1,
returnInterval = 1,
.statsInitialTime = 1
),
timsSinceFire = list(startTime = 1,
returnInterval = 1,
.statsInitialTime = 1
),
initBaseMaps = list(),
fireDataPrep = list()
)
modules <- list("initBaseMaps","fireDataPrep","fireNull","timeSinceFire")#, #"landWebDataPrep", "LBMR")
objects <- list(LCC05X=LCC05,shpStudyRegionX=shpStudyRegion)
paths <- list(
modulePath = moduleDir,
cachePath = cacheDir,
inputPath = inputDir,
outputPath = outputDir
)
#devtools::load_all("~/GitHub/SpaDES/.")
system.time(mySim <- simInit(times = times, params = parameters,
modules = modules, objects = objects,
paths = paths))
set.seed(123);system.time(nxtSim<-spades(SpaDES::copy(mySim), debug = TRUE))
library(raster)
inMemory
canProcessInMemory
raster:::.maxmemory
getOption("rasterMaxMemory")
?rasterOptions
options()
memory.size()
?memory.size
memory.limit()
Sys.getenv("R_MAX_MEM_SIZE")
2^32
2^31
2^30
2^64
2^64/1e12
(2^64)/1e12
(2^64)/1e15
2^2
2^10
(2^10)^3
(2^10)^4
(2^10)^5
a = raster::shapefile("M:\data\LandWeb\Study Area\ltfcycle3.shp")
a = raster::shapefile("M:\\data\\LandWeb\\Study Area\\ltfcycle3.shp")
a = raster::shapefile("M:\\data\\LandWeb\\Study Area\\ltfcycle3")
a = raster::shapefile("M:\\data\\LandWeb\\Study Area\\shpLandWEB.shp")
Plot(a)
plot(a)
b = raster::shapefile("M:\\data\\LandWeb\\Study Area\\ltfcycle3")
plot(b)
library(SpaDES)
clearPlot();Plot(a,b)
clearPlot();Plot(a)
clearPlot();Plot(b, addTo = "b", gp = gpar(col = "red", lwd = 2))
clearPlot();Plot(a)
Plot(b, addTo = "a", gp = gpar(col = "red", lwd = 2))
Plot(b);Plot(a, addTo = "b", gp = gpar(col = "red", lwd = 2))
clearPlot();Plot(b);Plot(a, addTo = "b", gp = gpar(col = "red", lwd = 2))
library(igraph)
library(rgdal)
library(raster)
library(magrittr)
library(archivist)
library(SpaDES)
rasterOptions(maxmemory = 1e9)
baseDir<-file.path("~","Dropbox","SpaDES","Data")
parentModule <- "fireNull" #which module should hold the cached data for GitHub
#this would normally be a parent module, hence the name
inputDir <- file.path(tempdir(), "inputs") %>% checkPath(create = TRUE)
outputDir <- file.path(tempdir(), "outputs")
moduleDir <- file.path(".")
cacheDir <- file.path(moduleDir,parentModule,"data", "cache") %>% checkPath(create = TRUE)
LCC05 <-raster(file.path(baseDir,
"LandCoverOfCanada2005_V1_4",
"LCC2005_V1_4a.tif")
)
foo<-path.expand(file.path(baseDir,"LandWEB","shp")) #somebody does not like ~s
shpStudyRegion <- SpaDES::cache(cacheDir, readOGR, foo,"shpLandWEB")
shpStudyRegion$fireReturnInterval <- shpStudyRegion$LTHRC #because of course it does.
rm(foo)
colrs <- colorRampPalette(colors = c("red", "dark green"))(max(shpStudyRegion$fireReturnInterval))[shpStudyRegion$fireReturnInterval]
spplot(shpStudyRegion["fireReturnInterval"])
times <- list(start = 0, end =10)
parameters <- list(
# .progress = list(type = "text", interval = 1), # for a progress bar
fireNull = list(startTime = 1,
returnInterval = 1,
.statsInitialTime = 1
),
timsSinceFire = list(startTime = 1,
returnInterval = 1,
.statsInitialTime = 1
),
initBaseMaps = list(),
fireDataPrep = list()
)
modules <- list("initBaseMaps","fireDataPrep","fireNull","timeSinceFire")#, #"landWebDataPrep", "LBMR")
objects <- list(LCC05X=LCC05,shpStudyRegionX=shpStudyRegion)
paths <- list(
modulePath = moduleDir,
cachePath = cacheDir,
inputPath = inputDir,
outputPath = outputDir
)
#devtools::load_all("~/GitHub/SpaDES/.")
system.time(mySim <- simInit(times = times, params = parameters,
modules = modules, objects = objects,
paths = paths))
shpStudyRegion <- SpaDES::cache(cacheDir, readOGR, foo,"shpLandWEB", notOlderThan = Sys.time())
foo<-path.expand(file.path(baseDir,"LandWEB","shp")) #somebody does not like ~s
shpStudyRegion <- SpaDES::cache(cacheDir, readOGR, foo,"shpLandWEB", notOlderThan = Sys.time())
foo<-path.expand(file.path(baseDir,"LandWEB","shp")) #somebody does not like ~s
shpStudyRegion <- SpaDES::cache(cacheDir, readOGR, foo,"shpLandWEB")
shpStudyRegion$fireReturnInterval <- shpStudyRegion$LTHRC #because of course it does.
rm(foo)
colrs <- colorRampPalette(colors = c("red", "dark green"))(max(shpStudyRegion$fireReturnInterval))[shpStudyRegion$fireReturnInterval]
spplot(shpStudyRegion["fireReturnInterval"])
times <- list(start = 0, end =10)
parameters <- list(
# .progress = list(type = "text", interval = 1), # for a progress bar
fireNull = list(startTime = 1,
returnInterval = 1,
.statsInitialTime = 1
),
timsSinceFire = list(startTime = 1,
returnInterval = 1,
.statsInitialTime = 1
),
initBaseMaps = list(),
fireDataPrep = list()
)
modules <- list("initBaseMaps","fireDataPrep","fireNull","timeSinceFire")#, #"landWebDataPrep", "LBMR")
objects <- list(LCC05X=LCC05,shpStudyRegionX=shpStudyRegion)
paths <- list(
modulePath = moduleDir,
cachePath = cacheDir,
inputPath = inputDir,
outputPath = outputDir
)
#devtools::load_all("~/GitHub/SpaDES/.")
system.time(mySim <- simInit(times = times, params = parameters,
modules = modules, objects = objects,
paths = paths))
devtools::load_all("C:/Eliot/GitHub/SpaDES")
openModules(mySim)
file.edit('C:/Eliot/GitHub/LandWeb/initBaseMaps/initBaseMaps.R')
times <- list(start = 0, end =10)
parameters <- list(
# .progress = list(type = "text", interval = 1), # for a progress bar
fireNull = list(startTime = 1,
returnInterval = 1,
.statsInitialTime = 1
),
timsSinceFire = list(startTime = 1,
returnInterval = 1,
.statsInitialTime = 1
),
initBaseMaps = list(),
fireDataPrep = list()
)
modules <- list("initBaseMaps","fireDataPrep","fireNull","timeSinceFire")#, #"landWebDataPrep", "LBMR")
objects <- list(LCC05X=LCC05,shpStudyRegionX=shpStudyRegion)
paths <- list(
modulePath = moduleDir,
cachePath = cacheDir,
inputPath = inputDir,
outputPath = outputDir
)
#devtools::load_all("~/GitHub/SpaDES/.")
system.time(mySim <- simInit(times = times, params = parameters,
modules = modules, objects = objects,
paths = paths))
params(mySim)$initBaseMaps
times <- list(start = 0, end =10)
parameters <- list(
# .progress = list(type = "text", interval = 1), # for a progress bar
fireNull = list(startTime = 1,
returnInterval = 1,
.statsInitialTime = 1
),
timsSinceFire = list(startTime = 1,
returnInterval = 1,
.statsInitialTime = 1
),
initBaseMaps = list(),
fireDataPrep = list()
)
modules <- list("initBaseMaps","fireDataPrep","fireNull","timeSinceFire")#, #"landWebDataPrep", "LBMR")
objects <- list(LCC05X=LCC05,shpStudyRegionX=shpStudyRegion)
paths <- list(
modulePath = moduleDir,
cachePath = cacheDir,
inputPath = inputDir,
outputPath = outputDir
)
#devtools::load_all("~/GitHub/SpaDES/.")
system.time(mySim <- simInit(times = times, params = parameters,
modules = modules, objects = objects,
paths = paths))
params(mySim)$initBaseMaps
set.seed(123);system.time(nxtSim<-spades(SpaDES::copy(mySim), debug = TRUE))
(isTRUE(params(sim)[[cur$moduleName]]$.useCache))
times <- list(start = 0, end =10)
parameters <- list(
# .progress = list(type = "text", interval = 1), # for a progress bar
fireNull = list(startTime = 1,
returnInterval = 1,
.statsInitialTime = 1
),
timsSinceFire = list(startTime = 1,
returnInterval = 1,
.statsInitialTime = 1
),
initBaseMaps = list(),
fireDataPrep = list()
)
modules <- list("initBaseMaps","fireDataPrep","fireNull","timeSinceFire")#, #"landWebDataPrep", "LBMR")
objects <- list(LCC05X=LCC05,shpStudyRegionX=shpStudyRegion)
paths <- list(
modulePath = moduleDir,
cachePath = cacheDir,
inputPath = inputDir,
outputPath = outputDir
)
#devtools::load_all("~/GitHub/SpaDES/.")
system.time(mySim <- simInit(times = times, params = parameters,
modules = modules, objects = objects,
paths = paths))
set.seed(123);system.time(nxtSim<-spades(SpaDES::copy(mySim), debug = TRUE))
times <- list(start = 0, end =10)
parameters <- list(
# .progress = list(type = "text", interval = 1), # for a progress bar
fireNull = list(startTime = 1,
returnInterval = 1,
.statsInitialTime = 1
),
timsSinceFire = list(startTime = 1,
returnInterval = 1,
.statsInitialTime = 1
),
initBaseMaps = list(),
fireDataPrep = list()
)
modules <- list("initBaseMaps","fireDataPrep","fireNull","timeSinceFire")#, #"landWebDataPrep", "LBMR")
objects <- list(LCC05X=LCC05,shpStudyRegionX=shpStudyRegion)
paths <- list(
modulePath = moduleDir,
cachePath = cacheDir,
inputPath = inputDir,
outputPath = outputDir
)
#devtools::load_all("~/GitHub/SpaDES/.")
system.time(mySim <- simInit(times = times, params = parameters,
modules = modules, objects = objects,
paths = paths))
set.seed(123);system.time(nxtSim<-spades(SpaDES::copy(mySim), debug = TRUE))
System.time(sim <- SpaDES::cache(cachePath(sim), FUN = get(moduleCall,
envir = envir(sim)), sim = sim,
eventTime=cur$eventTime, eventType = cur$eventType, debug = debugDoEvent,
objects = depends(sim)@dependencies[[cur$moduleName]]@inputObjects$objectName))
system.time(sim <- SpaDES::cache(cachePath(sim), FUN = get(moduleCall,
envir = envir(sim)), sim = sim,
eventTime=cur$eventTime, eventType = cur$eventType, debug = debugDoEvent,
objects = depends(sim)@dependencies[[cur$moduleName]]@inputObjects$objectName))
times <- list(start = 0, end =10)
parameters <- list(
# .progress = list(type = "text", interval = 1), # for a progress bar
fireNull = list(startTime = 1,
returnInterval = 1,
.statsInitialTime = 1
),
timsSinceFire = list(startTime = 1,
returnInterval = 1,
.statsInitialTime = 1
),
initBaseMaps = list(),
fireDataPrep = list()
)
modules <- list("initBaseMaps","fireDataPrep","fireNull","timeSinceFire")#, #"landWebDataPrep", "LBMR")
objects <- list(LCC05X=LCC05,shpStudyRegionX=shpStudyRegion)
paths <- list(
modulePath = moduleDir,
cachePath = cacheDir,
inputPath = inputDir,
outputPath = outputDir
)
#devtools::load_all("~/GitHub/SpaDES/.")
system.time(mySim <- simInit(times = times, params = parameters,
modules = modules, objects = objects,
paths = paths))
set.seed(123);system.time(nxtSim<-spades(SpaDES::copy(mySim), debug = TRUE))
file.edit('C:/Eliot/GitHub/LandWeb/initBaseMaps/initBaseMaps.R')
devtools::load_all("C:/Eliot/GitHub/SpaDES")
times <- list(start = 0, end =10)
parameters <- list(
# .progress = list(type = "text", interval = 1), # for a progress bar
fireNull = list(startTime = 1,
returnInterval = 1,
.statsInitialTime = 1
),
timsSinceFire = list(startTime = 1,
returnInterval = 1,
.statsInitialTime = 1
),
initBaseMaps = list(),
fireDataPrep = list()
)
modules <- list("initBaseMaps","fireDataPrep","fireNull","timeSinceFire")#, #"landWebDataPrep", "LBMR")
objects <- list(LCC05X=LCC05,shpStudyRegionX=shpStudyRegion)
paths <- list(
modulePath = moduleDir,
cachePath = cacheDir,
inputPath = inputDir,
outputPath = outputDir
)
#devtools::load_all("~/GitHub/SpaDES/.")
system.time(mySim <- simInit(times = times, params = parameters,
modules = modules, objects = objects,
paths = paths))
set.seed(123);system.time(nxtSim<-spades(SpaDES::copy(mySim), debug = TRUE))
ls(sim)
curList <- ls(sim)
system.time(sim <- SpaDES::cache(cachePath(sim), FUN = get(moduleCall,
envir = envir(sim)), sim = sim,
eventTime=cur$eventTime, eventType = cur$eventType, debug = debugDoEvent,
objects = depends(sim)@dependencies[[cur$moduleName]]@inputObjects$objectName))
current(sim)
depends(sim)@dependencies[[cur$moduleName]]@inputObjects$objectName
curList2 <- ls(sim)
curList2
times <- list(start = 0, end =10)
parameters <- list(
# .progress = list(type = "text", interval = 1), # for a progress bar
fireNull = list(startTime = 1,
returnInterval = 1,
.statsInitialTime = 1
),
timsSinceFire = list(startTime = 1,
returnInterval = 1,
.statsInitialTime = 1
),
initBaseMaps = list(),
fireDataPrep = list()
)
modules <- list("initBaseMaps","fireDataPrep","fireNull","timeSinceFire")#, #"landWebDataPrep", "LBMR")
objects <- list(LCC05X=LCC05,shpStudyRegionX=shpStudyRegion)
paths <- list(
modulePath = moduleDir,
cachePath = cacheDir,
inputPath = inputDir,
outputPath = outputDir
)
#devtools::load_all("~/GitHub/SpaDES/.")
system.time(mySim <- simInit(times = times, params = parameters,
modules = modules, objects = objects,
paths = paths))
set.seed(123);system.time(nxtSim<-spades(SpaDES::copy(mySim), debug = TRUE))
moduleCall
get(moduleCall,
envir = envir(sim))
debugDoEvent
sim <- get(moduleCall,
envir = envir(sim))(sim, cur$eventTime,
cur$eventType, debugDoEvent)
curList2 <- ls(sim)
curList2
sim <- SpaDES::cache(cachePath(sim), FUN = get(moduleCall,
envir = envir(sim)), sim = sim,
eventTime=cur$eventTime, eventType = cur$eventType, debug = debugDoEvent,
objects = depends(sim)@dependencies[[cur$moduleName]]@inputObjects$objectName)
devtools::load_all("C:/Eliot/GitHub/SpaDES")
times <- list(start = 0, end =10)
parameters <- list(
# .progress = list(type = "text", interval = 1), # for a progress bar
fireNull = list(startTime = 1,
returnInterval = 1,
.statsInitialTime = 1
),
timsSinceFire = list(startTime = 1,
returnInterval = 1,
.statsInitialTime = 1
),
initBaseMaps = list(),
fireDataPrep = list()
)
modules <- list("initBaseMaps","fireDataPrep","fireNull","timeSinceFire")#, #"landWebDataPrep", "LBMR")
objects <- list(LCC05X=LCC05,shpStudyRegionX=shpStudyRegion)
paths <- list(
modulePath = moduleDir,
cachePath = cacheDir,
inputPath = inputDir,
outputPath = outputDir
)
#devtools::load_all("~/GitHub/SpaDES/.")
system.time(mySim <- simInit(times = times, params = parameters,
modules = modules, objects = objects,
paths = paths))
set.seed(123);system.time(nxtSim<-spades(SpaDES::copy(mySim), debug = TRUE))
whFun
wh
tmpl[wh]
objectsToDigest
dig
envirHash
devtools::load_all("C:/Eliot/GitHub/SpaDES")
set.seed(123);system.time(nxtSim<-spades(SpaDES::copy(mySim), debug = TRUE))
object@.list
ls(sim)
set.seed(123);system.time(nxtSim<-spades(SpaDES::copy(mySim), debug = TRUE))
tmpl[wh]
set.seed(123);system.time(nxtSim<-spades(SpaDES::copy(mySim), debug = TRUE))
objectsToDigest
lapply(objectsToDigest, function(x) is(x, "function"))
lapply(objectsToDigest, function(x) is(get(x, envir=envir(similarity()), "function"))
)
lapply(objectsToDigest, function(x) is(get(x, envir=envir(sim), "function")))
lapply(objectsToDigest, function(x) is(get(x, envir=envir(object), "function")))
lapply(objectsToDigest, function(x) is(get(x, envir=envir(object)), "function"))
unlist(lapply(objectsToDigest, function(x) is(get(x, envir=envir(object)), "function")))
objectsToDigest[objectsToDigest %in% objects]
functions <- unlist(lapply(objectsToDigest, function(x)
is(get(x, envir=envir(object)), "function")))
functions
devtools::load_all("C:/Eliot/GitHub/SpaDES")
set.seed(123);system.time(nxtSim<-spades(SpaDES::copy(mySim), debug = TRUE))
depends(sim)@dependencies[[cur$moduleName]]@inputObjects$objectName
grep(ls(sim), pattern = cur$moduleName)
grep(ls(sim), pattern = cur$moduleName, value = TRUE)
moduleSpecificObjects <- c(grep(ls(sim), pattern = cur$moduleName, value = TRUE),
depends(sim)@dependencies[[cur$moduleName]]@inputObjects$objectName))
moduleSpecificObjects <- c(grep(ls(sim), pattern = cur$moduleName, value = TRUE),
depends(sim)@dependencies[[cur$moduleName]]@inputObjects$objectName)
moduleSpecificObjects
system.time(sim <- SpaDES::cache(cachePath(sim), FUN = get(moduleCall,
envir = envir(sim)), sim = sim,
eventTime=cur$eventTime, eventType = cur$eventType, debug = debugDoEvent,
objects = moduleSpecificObjects)
)
objects
devtools::load_all("C:/Eliot/GitHub/SpaDES")
set.seed(123);system.time(nxtSim<-spades(SpaDES::copy(mySim), debug = TRUE))
objectsToDigest
envirHash
tmpl[wh]
whRas
set.seed(123);system.time(nxtSim<-spades(SpaDES::copy(mySim), debug = TRUE))
devtools::load_all("C:/Eliot/GitHub/SpaDES")
set.seed(123);system.time(nxtSim<-spades(SpaDES::copy(mySim), debug = TRUE))
system.time(sim <- SpaDES::cache(cachePath(sim), FUN = get(moduleCall,
envir = envir(sim)), sim = sim,
eventTime=cur$eventTime, eventType = cur$eventType, debug = debugDoEvent,
objects = moduleSpecificObjects))
system.time(sim <- SpaDES::cache(cachePath(sim), FUN = get(moduleCall,
envir = envir(sim)), sim = sim,
eventTime=cur$eventTime, eventType = cur$eventType, debug = debugDoEvent,
objects = moduleSpecificObjects, notOlderThan = Sys.time()))
system.time(sim <- SpaDES::cache(cachePath(sim), FUN = get(moduleCall,
envir = envir(sim)), sim = sim,
eventTime=cur$eventTime, eventType = cur$eventType, debug = debugDoEvent,
objects = moduleSpecificObjects))
devtools::load_all("C:/Eliot/GitHub/SpaDES")
devtools::load_all("C:/Eliot/GitHub/SpaDES")
devtools::load_all("C:/Eliot/GitHub/SpaDES")
set.seed(123);system.time(nxtSim<-spades(SpaDES::copy(mySim), debug = TRUE))
devtools::load_all("C:/Eliot/GitHub/SpaDES")
system.time(mySim <- simInit(times = times, params = parameters,
modules = modules, objects = objects,
paths = paths))
set.seed(123);system.time(nxtSim<-spades(SpaDES::copy(mySim), debug = TRUE))
1456/60
set.seed(123);system.time(nxtSim<-spades(SpaDES::copy(mySim), debug = TRUE))
system.time(mySim <- simInit(times = times, params = parameters,
modules = modules, objects = objects,
paths = paths))
set.seed(123);system.time(nxtSim<-spades(SpaDES::copy(mySim), debug = TRUE))
system.time(mySim <- simInit(times = times, params = parameters,
modules = modules, objects = objects,
paths = paths))
set.seed(123);system.time(nxtSim<-spades(SpaDES::copy(mySim), debug = TRUE))
system.time(mySim <- simInit(times = times, params = parameters,
modules = modules, objects = objects,
paths = paths))
set.seed(123);system.time(nxtSim<-spades(SpaDES::copy(mySim), debug = TRUE))
