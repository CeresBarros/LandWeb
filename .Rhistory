#.progress = list(type = "text", interval = 1), # for a progress bar
## If there are further modules, each can have its own set of parameters:
#module1 = list(param1 = value1, param2 = value2),
#module2 = list(param1 = value1, param2 = value2)
)
modules <- list("importLandWeb_BAP_Layers")
objects <- list()
paths <- list(
cachePath = cacheDir,
modulePath = moduleDir,
inputPath = inputDir,
outputPath = outputDir
)
mySim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths, notOlderThan = Sys.time())
devtools::load_all("~/GitHub/SpaDES/.")
library(igraph)
library(SpaDES)
moduleDir <- file.path("C:/Eliot/SpaDES/modules")
inputDir <- file.path(moduleDir, "inputs") %>% checkPath(create = TRUE)
outputDir <- file.path(moduleDir, "outputs") %>% checkPath(create = TRUE)
cacheDir <- file.path(outputDir, "cache") %>% checkPath(create = TRUE)
times <- list(start = 0, end = 10)
parameters <- list(
#.progress = list(type = "text", interval = 1), # for a progress bar
## If there are further modules, each can have its own set of parameters:
#module1 = list(param1 = value1, param2 = value2),
#module2 = list(param1 = value1, param2 = value2)
)
modules <- list("importLandWeb_BAP_Layers")
objects <- list()
paths <- list(
cachePath = cacheDir,
modulePath = moduleDir,
inputPath = inputDir,
outputPath = outputDir
)
mySim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
devtools::load_all("~/GitHub/SpaDES/.")
devtools::load_all("~/GitHub/SpaDES/.")
library(igraph)
library(SpaDES)
moduleDir <- file.path("C:/Eliot/SpaDES/modules")
inputDir <- file.path(moduleDir, "inputs") %>% checkPath(create = TRUE)
outputDir <- file.path(moduleDir, "outputs") %>% checkPath(create = TRUE)
cacheDir <- file.path(outputDir, "cache") %>% checkPath(create = TRUE)
times <- list(start = 0, end = 10)
parameters <- list(
#.progress = list(type = "text", interval = 1), # for a progress bar
## If there are further modules, each can have its own set of parameters:
#module1 = list(param1 = value1, param2 = value2),
#module2 = list(param1 = value1, param2 = value2)
)
modules <- list("importLandWeb_BAP_Layers")
objects <- list()
paths <- list(
cachePath = cacheDir,
modulePath = moduleDir,
inputPath = inputDir,
outputPath = outputDir
)
mySim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
library(igraph)
library(SpaDES)
moduleDir <- file.path("C:/Eliot/SpaDES/modules")
inputDir <- file.path(moduleDir, "inputs") %>% checkPath(create = TRUE)
outputDir <- file.path(moduleDir, "outputs") %>% checkPath(create = TRUE)
cacheDir <- file.path(outputDir, "cache") %>% checkPath(create = TRUE)
times <- list(start = 0, end = 10)
parameters <- list(
#.progress = list(type = "text", interval = 1), # for a progress bar
## If there are further modules, each can have its own set of parameters:
importLandWeb_BAP_Layers = list(.useCache = FALSE),
#module2 = list(param1 = value1, param2 = value2)
)
modules <- list("importLandWeb_BAP_Layers")
objects <- list()
paths <- list(
cachePath = cacheDir,
modulePath = moduleDir,
inputPath = inputDir,
outputPath = outputDir
)
mySim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
library(igraph)
library(SpaDES)
moduleDir <- file.path("C:/Eliot/SpaDES/modules")
inputDir <- file.path(moduleDir, "inputs") %>% checkPath(create = TRUE)
outputDir <- file.path(moduleDir, "outputs") %>% checkPath(create = TRUE)
cacheDir <- file.path(outputDir, "cache") %>% checkPath(create = TRUE)
times <- list(start = 0, end = 10)
parameters <- list(
#.progress = list(type = "text", interval = 1), # for a progress bar
## If there are further modules, each can have its own set of parameters:
importLandWeb_BAP_Layers = list(.useCache = FALSE)
#module2 = list(param1 = value1, param2 = value2)
)
modules <- list("importLandWeb_BAP_Layers")
objects <- list()
paths <- list(
cachePath = cacheDir,
modulePath = moduleDir,
inputPath = inputDir,
outputPath = outputDir
)
mySim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
devtools::load_all("~/GitHub/SpaDES/.")
library(igraph)
library(SpaDES)
moduleDir <- file.path("C:/Eliot/SpaDES/modules")
inputDir <- file.path(moduleDir, "inputs") %>% checkPath(create = TRUE)
outputDir <- file.path(moduleDir, "outputs") %>% checkPath(create = TRUE)
cacheDir <- file.path(outputDir, "cache") %>% checkPath(create = TRUE)
times <- list(start = 0, end = 10)
parameters <- list(
#.progress = list(type = "text", interval = 1), # for a progress bar
## If there are further modules, each can have its own set of parameters:
importLandWeb_BAP_Layers = list(.useCache = FALSE)
#module2 = list(param1 = value1, param2 = value2)
)
modules <- list("importLandWeb_BAP_Layers")
objects <- list()
paths <- list(
cachePath = cacheDir,
modulePath = moduleDir,
inputPath = inputDir,
outputPath = outputDir
)
mySim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
sim@.envir$.inputObjects
sim
ls(sim)
sim@params[[m]][[".useCache"]]
library(igraph)
library(SpaDES)
moduleDir <- file.path("c:/Eliot/GitHub/LandWeb")
inputDir <- file.path(moduleDir, "inputs") %>% checkPath(create = TRUE)
outputDir <- file.path(moduleDir, "outputs")
cacheDir <- file.path(outputDir, "cache")
times <- list(start = 0, end = 3)
parameters <- list(
#.progress = list(type = "text", interval = 1), # for a progress bar
## If there are further modules, each can have its own set of parameters:
#module1 = list(param1 = value1, param2 = value2),
#module2 = list(param1 = value1, param2 = value2)
)
modules <- list("LandMine")
objects <- list()
paths <- list(
cachePath = cacheDir,
modulePath = moduleDir,
inputPath = inputDir,
outputPath = outputDir
)
mySim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
mySim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
Cache(randomPolygons, emptyRas, numTypes = 4)#, notOlderThan = Sys.time())
cachePath(sim)
devtools::load_all("~/GitHub/SpaDES/.")
mySim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
doEventFrameNum
sys.calls()
doEventFrameNum <- grep(sys.calls(), pattern = "^.parseModule")[1]
doEventFrameNum
(!is.na(doEventFrameNum))
get("sim", envir = sys.frame(doEventFrameNum))
sim <- get("sim", envir = sys.frame(doEventFrameNum))
cacheRepo <- sim@paths$cachePath
cacheRepo
doEventFrameNum <- grep(sys.calls(), pattern = "^doEvent")[1]
doEventFrameNum
doEventFrameNum <- grep(sys.calls(), pattern = "[^doEvent][^.parseModule]")
doEventFrameNum
doEventFrameNum <- grep(sys.calls(), pattern = "^[doEvent][.parseModule]")[1]
doEventFrameNum
sys.calls()
regexp
?regexp
doEventFrameNum <- grep(sys.calls(), pattern = "^{doEvent}?{.parseModule}?")
doEventFrameNum <- grep(sys.calls(), pattern = "{^doEvent}?{^.parseModule}?")
doEventFrameNum <- grep(sys.calls(), pattern = "{doEvent}?{parseModule}?")
doEventFrameNum <- grep(sys.calls(), pattern = "{doEvent}{parseModule}")
doEventFrameNum <- grep(sys.calls(), pattern = "[{doEvent}][{parseModule}]")
doEventFrameNum
doEventFrameNum <- grep(sys.calls(), pattern = "doEvent?")
doEventFrameNum
doEventFrameNum <- grep(sys.calls(), pattern = "doEvent?parseModule?")
doEventFrameNum
doEventFrameNum <- grep(sys.calls(), pattern = "parseModule?")
doEventFrameNum
doEventFrameNum <- grep(sys.calls(), pattern = "(^.parseModule)?")
doEventFrameNum
doEventFrameNum <- grep(sys.calls(), pattern = "^(.parseModule)?")
doEventFrameNum
doEventFrameNum <- grep(sys.calls(), pattern = "^(.parseModule)")
doEventFrameNum
doEventFrameNum <- grep(sys.calls(), pattern = "^[(doEvent)(.parseModule)]")
doEventFrameNum
doEventFrameNum <- grep(sys.calls(), pattern = "^[(doEvent)]")
doEventFrameNum
doEventFrameNum <- grep(sys.calls(), pattern = "[(^doEvent)]")
doEventFrameNum
doEventFrameNum <- grep(sys.calls(), pattern = "^[(oEvent)]")
doEventFrameNum
sys.calls()
doEventFrameNum <- grep(sys.calls(), pattern = "(^doEvent)|(^.parseModule)")
doEventFrameNum
doEventFrameNum <- grep(sys.calls(), pattern = "(^doEvent) | (^.parseModule)")[1]
doEventFrameNum
doEventFrameNum <- grep(sys.calls(), pattern = "(^doEvent) | (^.parseModule)")[1]
doEventFrameNum
doEventFrameNum <- grep(sys.calls(), pattern = "(^doEvent)|(^.parseModule)")[1]
doEventFrameNum
devtools::load_all("~/GitHub/SpaDES/.")
mySim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
mySim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
devtools::load_all("~/GitHub/SpaDES/.")
mySim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
spades(mySim)
mySim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
spades(mySim)
mySim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
spades(mySim)
devtools::load_all("~/GitHub/SpaDES/.")
mySim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
spades(mySim)
thisID
toRm
i
thisID
size
len
whichID
(size + len)[whichID]
maxSize[whichID]
maxSize
(size + len)[whichID] - maxSize[whichID]
whichID
toRm <- (size + len)[whichID] - maxSize[whichID]
toRm
length(whichID)
potentials <- potentials[-resample(thisID, toRm[i]), , drop = FALSE]
c
c
mySim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
spades(mySim)
print(n)
spreadState
spreadStateExists
spreadStateExists
spreadStateExists
print(n)
i
print(i)
c
devtools::load_all("~/GitHub/SpaDES/.")
mySim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
spades(mySim)
devtools::load_all("~/GitHub/SpaDES/.")
spades(mySim)
toRm[i]
toRm
thisID
potentials
potentials[-resample(thisID, toRm[i]), , drop = FALSE]
resample(thisID, toRm[i])
thisID
length(thisID)
toRm[i]
toRm
size + len
whichID
(allowOverlap | returnDistances)
spreads[potentials[, 1L]]
spreads[potentials[, 1L]] == whichID[i]
which(spreads[potentials[, 1L]] == whichID[i])
size
size + len
devtools::load_all("~/GitHub/SpaDES/.")
spades(mySim)
thisID
whichTooBig[i]
size
maxSize
maxSize[whichTooBig]
toRm
(size + len)[whichTooBig]
maxSize[whichTooBig]
size
whichTooBig
toRm
(!noMaxSize)
(allowOverlap | returnDistances)
tabulate(spreads[potentials[, 1L]], length(maxSize))
spreads[potentials[, 1L]]
tabulate(spreads[potentials[, 1L]], length(maxSize))
thisID
whichTooBig[i]
spreads[potentials[, 1L]]
which(spreads[potentials[, 1L]] == whichTooBig[i])
spades(mySim)
thisID
toRm[i]
-resample(thisID, toRm[i])
-resample(thisID, toRm[i])
thisID
i
size
len
thisID
potentials[, 3L]
potentials
spreads[potentials[, 1L]]
thisID
spreads[potentials[, 1L]] == whichTooBig[i]
spreads[potentials[, 1L]]
spreads[potentials[, 1L]]
potentials[, 1L]
spreadState
thisID
rowNumsToDelete
(size + len)[whichTooBig]
(size + len)
whichTooBig
size
maxSize
spades(mySim)
devtools::load_all("~/GitHub/SpaDES/.")
spades(mySim)
devtools::load_all("~/GitHub/SpaDES/.")
spades(mySim)
maxSizes
maxSize
devtools::load_all("~/GitHub/SpaDES/.")
spades(mySim)
size
len
whichTooBig
spreads[events]
!spreads[events] %fin% whichTooBig
event
events
size
devtools::load_all("~/GitHub/SpaDES/.")
spades(mySim)
size
size
maxSize
maxSize
size
devtools::load_all("~/GitHub/SpaDES/.")
spades(mySim)
maxSize
maxSize
size
size
maxSize
sizeAll
spreadState
microbenchmark(spreadState[, list(len = length(initialLocus)), by = id])
library(microbenchmark)
microbenchmark(spreadState[, list(len = length(initialLocus)), by = id])
microbenchmark(spreadState[, list(len = length(initialLocus)), by = id], spreadState[, list(len = .N), by = id])
microbenchmark(spreadState[, list(len = length(initialLocus)), by = id], spreadState[, list(len = .N), by = id])
spreadState[, list(len = length(initialLocus)), by = id]
spreadState[, list(len = .N), by = id]
all.equal(spreadState[, list(len = .N), by = id],spreadState[, list(len = length(initialLocus)), by = id])
spreadState
devtools::load_all("~/GitHub/SpaDES/.")
spades(mySim)
dtToJoin
dtToJoin[,.N,by=initialLocus]
allCells
allCells[,.N,by=initialLocus]
dtToJoin
allCells <- rbindlist(list(completed, active))
allCells
initEventID <- allCells[indices %fin% initialLoci, id]
initEventID
allCells
allCells
allCells[active==TRUE]
allCells
allCells <- rbindlist(list(completed, active))
initEventID <- allCells[indices %fin% initialLoci, id]
dtToJoin
initEventID
initialLoci
active
active[,.N,by=id]
completed[,.N,by=id]
active[,.N,by=id]
active[,.N,by=id]
completed[,.N,by=id]
completed[,.N,by=id] %>% setkey(id)
active[,.N,by=id] %>% setkey(id) %>% print()
completed[,.N,by=id] %>% setkey(id) %>% print()
spades(mySim)
active
completed
spreadStateExists
spreadState
size
loci
devtools::load_all("~/GitHub/SpaDES/.")
spades(mySim)
spreadState
spreadState[active==TRUE]
loci
loci
loci[!(loci %fin% spreadState[, indices])]
loci
loci
any(is.na(loci))
loci <- spreadState[active==TRUE, indices]
loci
devtools::load_all("~/GitHub/SpaDES/.")
spades(mySim)
suze
size
active
completed
allCells
indices %fin% initialLoci
allCells[indices %fin% initialLoci, id]
allCells
allCells
loci
microbenchmark(spreadState[active==TRUE, indices])
microbenchmark(spreadState[active==TRUE, indices], spreadState[active==TRUE]$indices)
microbenchmark(spreadState[active==TRUE, indices], spreadState[active==TRUE]$indices)
loci <- spreadState[active==TRUE]$indices
rowNumsToDelete
toRm[i]
resample(rowNumsToDelete, toRm[i])
size
spreadState[, list(len = .N), by = id]
size
sizeAll <- spreadState[active==TRUE, list(len = .N), by = id]
sizeAll
sizeAll <- spreadState[active==FALSE, list(len = .N), by = id]
sizeAll
maxSize <- rep_len(maxSize, length(initialLoci) + NROW(sizeAll))
size <- c(sizeAll[, len], rep_len(1L, length(initialLoci)))
size
devtools::load_all("~/GitHub/SpaDES/.")
spades(mySim)
devtools::load_all("~/GitHub/SpaDES/.")
spades(mySim)
size
rowNumsToDelete
toRm[i]
potentials
size
len
devtools::load_all("~/GitHub/SpaDES/.")
spades(mySim)
Q
devtools::load_all("~/GitHub/SpaDES/.")
library(igraph)
library(SpaDES)
moduleDir <- file.path("c:/Eliot/GitHub/LandWeb")
inputDir <- file.path(moduleDir, "inputs") %>% checkPath(create = TRUE)
outputDir <- file.path(moduleDir, "outputs")
cacheDir <- file.path(outputDir, "cache")
times <- list(start = 0, end = 3)
parameters <- list(
#.progress = list(type = "text", interval = 1), # for a progress bar
## If there are further modules, each can have its own set of parameters:
#module1 = list(param1 = value1, param2 = value2),
#module2 = list(param1 = value1, param2 = value2)
)
modules <- list("LandMine")
objects <- list()
paths <- list(
cachePath = cacheDir,
modulePath = moduleDir,
inputPath = inputDir,
outputPath = outputDir
)
mySim <- simInit(times = times, params = parameters, modules = modules,
objects = objects, paths = paths)
spades(mySim)
devtools::load_all("~/GitHub/SpaDES/.")
spades(mySim)
size
len
neighProb
neighProbs
?debugging
?debug
roxygenise(roclets = "rd", package.dir = "LandMine")
library(roxygen2)
roxygenise(roclets = "rd", package.dir = "LandMine")
roxygenise(roclets = "rd", package.dir = "LandMine")
q()
